------------------------------------------------------------------------------------------

Optional: Test Script 

Development Write an automated test script to verify the login functionality of a web application. The test script should.

------------------------------------------------------------------------------------------

To create an automated test script to verify the login functionality of a web application, you can use a test automation framework like Selenium with Python. 
Below is an example script that performs the steps you've outlined.

Prerequisites for python use:

    1. Install Selenium
    2. Download WebDriver: Download the appropriate WebDriver for your browser (e.g., ChromeDriver for Chrome) and ensure it's in your system's PATH or specify the path in the script.

In my case I used PyCharm and both where already installed from previous projects.

Explanation for the successful test scenarios:

    Open the web application in a browser:
        The script uses Selenium's webdriver.Chrome() to open a new Chrome browser instance.
        The driver.get() method navigates to the web application's login page.

    Enter valid credentials and submit the login form:
        driver.find_element(By.ID, "username") and driver.find_element(By.ID, "password") are used to locate the username and password input fields.
        send_keys() method inputs the credentials.
        driver.find_element(By.ID, "loginButton") locates the login button, and click() method submits the form.

    Verify that the user is successfully logged in:
        The script waits for a specific element (dashboard_element) to appear using WebDriverWait and EC.presence_of_element_located.
        Alternatively, it checks if the page title contains a specific string (Dashboard) to confirm a successful login.

    Error Handling:
        The script catches any exceptions that occur during the test and prints a failure message.

    Cleanup:
        The browser is closed at the end of the test using driver.quit() to ensure no leftover browser instances.

Customization

    Some of the needed information like "login web-page", "username", "password", "loginButton", "dashboard", and "Dashboard" with the actual URLs, element locators, and expected page titles of your web application are in this simple example hardcoded.

This script is a basic starting point. Depending on the complexity of your web application, you might need to enhance it with more robust error handling, additional validations, or integration with a test framework like pytest or a CI/CD pipeline.
